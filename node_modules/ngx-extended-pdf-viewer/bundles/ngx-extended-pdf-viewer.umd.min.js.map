{"version":3,"sources":["ng://ngx-extended-pdf-viewer/lib/ngx-extended-pdf-viewer.component.ts","ng://ngx-extended-pdf-viewer/lib/ngx-extended-pdf-viewer.module.ts"],"names":["NgxExtendedPdfViewerComponent","this","initialized","delayFirstView","_height","useBrowserLocale","backgroundColor","_showSidebarButton","showSidebarOnLoad","undefined","showFindButton","showPagingButtons","showZoomButtons","showPresentationModeButton","showOpenFileButton","showPrintButton","showDownloadButton","showBookmarkButton","showSecondaryToolbarButton","showRotateButton","showSelectToolButton","showHandToolButton","showScrollingButton","showSpreadButton","showPropertiesButton","zoom","zoomChange","EventEmitter","_mobileFriendlyZoom","toolbarWidth","findbarTop","findbarLeft","secondaryToolbarRight","_top","Object","defineProperty","prototype","url","_src","h","height","show","factor","test","window","navigator","userAgent","Number","replace","toString","isIE","showSidebarButton","mobileFriendlyZoom","endsWith","substring","length","emitZoomChange","selectedIndex","sizeSelector","nativeElement","s","options","value","label","emit","emitZoomChangeAfterDelay","_this","setTimeout","ngOnInit","webViewerLoad","PDFViewerApplication","appConfig","defaultUrl","isViewerEmbedded","overrideDefaultSettings","pc","document","getElementById","getElementsByTagName","appendChild","overrideHistory","z","sidebarViewOnLoad","ngAfterViewInit","initTimeout","open","ngOnDestroy","clearTimeout","app","cleanup","close","_boundEvents","unbindWindowEvents","bus","key","unbindEvents","_listeners","eventBus","ngOnChanges","changes","Component","args","selector","template","encapsulation","ViewEncapsulation","None","Input","Output","ViewChild","NgxExtendedPdfViewerModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\n  Component,\n  OnInit,\n  ViewEncapsulation,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  AfterViewInit,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  ViewChild\n} from '@angular/core';\n\ndeclare var PDFJS: any;\n\n@Component({\n  selector: 'ngx-extended-pdf-viewer',\n  templateUrl: './ngx-extended-pdf-viewer.component.html',\n  styleUrls: ['./viewer-with-images.css', './ngx-extended-pdf-viewer.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class NgxExtendedPdfViewerComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n  private _src: string;\n\n  private initialized = false;\n\n  /**\n   * Number of milliseconds to wait between initializing the PDF viewer and loading the PDF file.\n   * Most users can let this parameter safely at it's default value of zero.\n   * Set this to 1000 or higher if you run into timing problems (typically caused by loading the locale files\n   * after the PDF files, so they are not available when the PDF viewer is initialized).\n   */\n  @Input()\n  delayFirstView = 0;\n\n  /** store the timeout id so it can be canceled if user leaves the page before the PDF is shown */\n  private initTimeout: any;\n\n  @Input()\n  public set src(url: string) {\n    this._src = url;\n  }\n\n  private _height = '100%';\n\n  @Input()\n  public set height(h: string) {\n    if (h) {\n      this._height = h;\n    } else {\n      this.height = '100%';\n    }\n  }\n\n  public get height() {\n    return this._height;\n  }\n\n  /**\n   * If this flag is true, this components adds a link to the locale assets. The pdf viewer\n   * sees this link and uses it to load the locale files automatically.\n   * @param useBrowserLocale boolean\n   */\n  @Input()\n  public useBrowserLocale = false;\n\n  @Input()\n  public backgroundColor = '#e8e8eb';\n\n  public _showSidebarButton = true;\n\n  public get showSidebarButton() {\n    return this._showSidebarButton;\n  }\n  @Input()\n  public set showSidebarButton(show: boolean) {\n    this._showSidebarButton = show;\n    const isIE = /msie\\s|trident\\//i.test(window.navigator.userAgent);\n    let factor = 1;\n    if (isIE) {\n      factor = Number((this._mobileFriendlyZoom || '100').replace('%', '')) / 100;\n    }\n\n    if (this._showSidebarButton) {\n      this.findbarLeft = (68 * factor).toString() + 'px';\n    } else {\n      this.findbarLeft = '0px';\n    }\n  }\n\n  /** If [showSideBarButton]=\"true\", do you want the sidebar to be shown by default ([showSidebarOnLoad])=\"true\")\n   * or not? By default, this flag is undefined, telling the PDF viewer to use the last setting used with this particular\n   * document, or to hide the sidebar if the document is opened for the first time.\n   */\n  @Input()\n  public showSidebarOnLoad: boolean | undefined = undefined;\n\n  @Input()\n  public showFindButton = true;\n  @Input()\n  public showPagingButtons = true;\n  @Input()\n  public showZoomButtons = true;\n  @Input()\n  public showPresentationModeButton = false;\n  @Input()\n  public showOpenFileButton = true;\n  @Input()\n  public showPrintButton = true;\n  @Input()\n  public showDownloadButton = true;\n  @Input()\n  public showBookmarkButton = true;\n  @Input()\n  public showSecondaryToolbarButton = true;\n  @Input()\n  public showRotateButton = true;\n  @Input()\n  public showSelectToolButton = true;\n  @Input()\n  public showHandToolButton = true;\n  @Input()\n  public showScrollingButton = true;\n  @Input()\n  public showSpreadButton = true;\n  @Input()\n  public showPropertiesButton = true;\n\n  /** Legal values: undefined, 'auto', 'page-actual', 'page_fit', 'page-width', or '50' (or any other percentage) */\n  @Input()\n  public zoom: string | number | undefined = undefined;\n\n  @Output()\n  public zoomChange = new EventEmitter();\n\n  /** This attributes allows you to increase the size of the UI elements so you can use them on small mobile devices.\n   * This attribute is a string with a percent character at the end (e.g. \"150%\").\n   */\n  @Input() _mobileFriendlyZoom = '100%';\n\n  public toolbarWidth = '100%';\n\n  // dirty IE11 hack - temporary solution\n  public findbarTop: string | undefined = undefined;\n\n  // dirty IE11 hack - temporary solution\n  public findbarLeft: string | undefined = undefined;\n\n  // dirty IE11 hack - temporary solution\n  public secondaryToolbarRight: string | undefined = undefined;\n\n  public get mobileFriendlyZoom() {\n    return this._mobileFriendlyZoom;\n  }\n  /*\n   * This attributes allows you to increase the size of the UI elements so you can use them on small mobile devices.\n   * This attribute is a string with a percent character at the end (e.g. \"150%\").*/\n  @Input()\n  public set mobileFriendlyZoom(zoom: string) {\n    this._mobileFriendlyZoom = zoom;\n    const isIE = /msie\\s|trident\\//i.test(window.navigator.userAgent);\n    let factor = 1;\n    if (isIE) {\n      factor = Number((zoom || '100').replace('%', '')) / 100;\n    }\n    if (this.showSidebarButton) {\n      this.findbarLeft = (68 * factor).toString() + 'px';\n    } else {\n      this.findbarLeft = '0px';\n    }\n    if (isIE) {\n      // dirty, temporary hack\n      this.toolbarWidth = (100 / factor).toString() + '%';\n      this.findbarTop = (32 * factor).toString() + 'px';\n      this.secondaryToolbarRight = (252 * (factor - 1)).toString() + 'px';\n    }\n  }\n\n  /** Deprecated. Please use [mobileFriendlyZoom] instead.\n   * This attributes allows you to increase the size of the UI elements so you can use them on small mobile devices.\n   * This attribute is a string with a percent character at the end (e.g. \"150%\").*/\n  @Input()\n  public set mobileZoom(mobileFriendlyZoom: string) {\n    this.mobileFriendlyZoom = mobileFriendlyZoom;\n  }\n\n  @ViewChild('sizeSelector') sizeSelector;\n\n  private _top: string | undefined = undefined;\n\n  public get sidebarPositionTop(): string {\n    if (this._top) {\n      return this._top;\n    }\n    if (this.mobileFriendlyZoom) {\n      if (this.mobileFriendlyZoom.endsWith('%')) {\n        const zoom = Number(this.mobileFriendlyZoom.substring(0, this.mobileFriendlyZoom.length - 1));\n        return (0.32 * zoom).toString() + 'px';\n      }\n      if (this.mobileFriendlyZoom.endsWith('px')) {\n        return this.mobileFriendlyZoom;\n      }\n    }\n    return '32px';\n  }\n  public get viewerPositionTop(): string {\n    if (this._top) {\n      return this._top;\n    }\n    if (this.mobileFriendlyZoom) {\n      if (this.mobileFriendlyZoom.endsWith('%')) {\n        const zoom = Number(this.mobileFriendlyZoom.substring(0, this.mobileFriendlyZoom.length - 1));\n        return (1 + 0.32 * zoom).toString() + 'px';\n      }\n      if (this.mobileFriendlyZoom.endsWith('px')) {\n        return this.mobileFriendlyZoom;\n      }\n    }\n    return '32px';\n  }\n\n  constructor() {}\n\n  public emitZoomChange(): void {\n    const selectedIndex = this.sizeSelector.nativeElement.selectedIndex;\n    if (selectedIndex) {\n      const s = this.sizeSelector.nativeElement.options[selectedIndex] as HTMLOptionElement;\n      let value: number | string = s.label;\n\n      if (value.endsWith('%')) {\n        value = Number(value.replace('%', ''));\n      } else {\n        value = s.value;\n      }\n      this.zoomChange.emit(value);\n    }\n  }\n\n  public emitZoomChangeAfterDelay(): void {\n    setTimeout(() => {\n      this.emitZoomChange();\n    }, 10);\n  }\n\n  ngOnInit() {\n    setTimeout(() => {\n      // This initializes the webviewer, the file may be passed in to it to initialize the viewer with a pdf directly\n      (<any>window).webViewerLoad();\n\n      (<any>window).PDFViewerApplication.appConfig.defaultUrl = ''; // IE bugfix\n      (<any>window).PDFViewerApplication.isViewerEmbedded = true;\n      this.overrideDefaultSettings();\n\n      const pc = document.getElementById('printContainer');\n      if (pc) {\n        document.getElementsByTagName('body')[0].appendChild(pc);\n      }\n    }, 0);\n  }\n\n  private overrideDefaultSettings() {\n    (<any>window).PDFViewerApplication.overrideHistory = {};\n    if (this.zoom) {\n      let z = this.zoom;\n      if (typeof z !== 'number') {\n        if (z.endsWith('%')) {\n          z = z.replace('%', '');\n        }\n      }\n      (<any>window).PDFViewerApplication.overrideHistory.zoom = z;\n    }\n    if (this.showSidebarButton) {\n      if (this.showSidebarOnLoad !== undefined) {\n        (<any>window).PDFViewerApplication.sidebarViewOnLoad = this.showSidebarOnLoad ? 1 : 0;\n        (<any>window).PDFViewerApplication.appConfig.sidebarViewOnLoad = this.showSidebarOnLoad ? 1 : 0;\n        (<any>window).PDFViewerApplication.overrideHistory.sidebarViewOnLoad = this.showSidebarOnLoad ? 1 : 0;\n      }\n    } else {\n      (<any>window).PDFViewerApplication.sidebarViewOnLoad = 0;\n      (<any>window).PDFViewerApplication.appConfig.sidebarViewOnLoad = 0;\n      (<any>window).PDFViewerApplication.overrideHistory.sidebarViewOnLoad = 0;\n    }\n  }\n\n  public ngAfterViewInit() {\n    this.initTimeout = setTimeout(() => {\n      this.initTimeout = null;\n      // open a file in the viewer\n      if (!!this._src) {\n        (<any>window).PDFViewerApplication.open(this._src);\n      }\n    }, this.delayFirstView);\n\n    this.initialized = true;\n  }\n\n  public ngOnDestroy(): void {\n    if (this.initTimeout) {\n      clearTimeout(this.initTimeout);\n      this.initTimeout = undefined;\n    }\n    const app = (<any>window).PDFViewerApplication;\n    if (app) {\n      app.cleanup();\n      app.close();\n      if (app._boundEvents) {\n        app.unbindWindowEvents();\n      }\n      const bus = app.eventBus as any;\n      if (bus) {\n        app.unbindEvents();\n        for (const key in bus._listeners) {\n          if (bus._listeners[key]) {\n            bus._listeners[key] = undefined;\n          }\n        }\n      }\n      app.eventBus = null;\n      //      app.PDFViewer = null;\n    }\n    //    (<any>window).PDFViewerApplication = null;\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (this.initialized) {\n      if ('src' in changes) {\n        if (!!this._src) {\n          this.overrideDefaultSettings();\n          (<any>window).PDFViewerApplication.open(this._src);\n        }\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxExtendedPdfViewerComponent } from './ngx-extended-pdf-viewer.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [NgxExtendedPdfViewerComponent],\n  exports: [NgxExtendedPdfViewerComponent]\n})\nexport class NgxExtendedPdfViewerModule {}\n"]}